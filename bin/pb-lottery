#!/usr/bin/env raku

use PB-Lottery;
use PB-Lottery::Subs;
use PB-Lottery::Classes;

# check for required env var
my $env-var = "PB_LOTTERY_PRIVATE_DIR";
my $pdir;
if %*ENV{$env-var}:exists {
    $pdir = %*ENV{$env-var};
}
else {
    print qq:to/HERE/;
    FATAL: The required environment variable

              $env-var 

           is not defined.  See the README for details.
           Exiting...
    HERE
    exit(1);
}

my $debug  = 0;
my $pick   = 0;
my $status = 0;
my $edraw  = 0;
my $epick  = 0;
my $all    = 0;

if not @*ARGS {
    print qq:to/HERE/;
    Usage: {$*PROGRAM.basename} <mode> [options...]

    Modes:
      pick   - Select a random Power Ball play
      status - Shows current user results from latest data
      edraw  - Begin a dialogue to enter a Power Ball draw
                 (not yet implemented)
      epick  - Begin a dialogue to enter a Power Ball ticket
                 (not yet implemented)

    Options:
      all    - With mode 'status', if true, show all valid data
                 (including net profit/loss)
      debug

    HERE
    exit;
}

for @*ARGS {
    when /^:i p/  { ++$pick   }
    when /^:i s/  { ++$status }
    when /^:i ed/ { ++$edraw  }
    when /^:i ep/ { ++$epick  }
    when /^:i a/  { ++$all    }
    when /^:i d/  { ++$debug  }
    default {
        print qq:to/HERE/;
        FATAL: Unknown entry '$_'.
               Exiting...
        HERE
        exit(1);
    }
}

if $debug { say "DEBUG: early exit"; exit; }

if $status {
    do-status $pdir, :$all, :$debug;
}
elsif $pick {
    do-pick $pdir, :$debug;
}
elsif $edraw {
    do-enter-draw $pdir, :$debug;
}
elsif $epick {
    do-enter-pick $pdir, :$debug;
}

=begin comment
my $t = get-random-powerball-play;
say "random ticket: '$t'";
my $np = 4;
my @np = get-multiple-powerball-plays $np;
say "4 more plays:";
say "  '$_'" for @np;
say "DEBUG exit"; exit;
=end comment

=finish

# TODO:
#   put all draws and tickets here for easy visibility
#     + add a data file showing which ticket was used for which draw
#     + price of tickets
#     + accumulated cost
#   add a way to account for plus ups (exta cost for better odds or prizes)
#   use subs instead of methods for some things
#   ensure ticket id shows on output

# my current numbers: our @picks is export

# rules are complicated
my $rules = q:to/HERE/;
# winning matches and prizes:
#   1 numbers + pb or just pb      $4
#   2 numbers + pb or 3 numbers    $7
#   3 numbers + pb or 4 numbers    $100
#   4 numbers + pb                 $50,000
#   5 numbers                      $1,000,000
#   5 numbers + pb                 current jackpot
HERE

# Note the first five number must be in the range 1..69
# The last number is the Power Ball in the range 1..26
# the official Power Ball draws by date:
my $lnum = "x x x x x x 2025-08-27";
my @draws = [
   # a  b  c  d  e  f # <= %nums hash key
my @alpha = 'A'..'Z';

if not @*ARGS {
    say qq:to/HERE/;
    Enter the lottery winning numbers and dates in this file at the top.
    HERE
    exit;
}

my $show-rules = True;
print $rules;
for @draws.kv -> $i is copy, $entry {
    # each wnum is a draw on that date
    my $w = LNum.new: :$entry;
#   say $w.date;
#   $w.show: $i;

    # for that draw result, compare each of our number sets for any matches
    my $show-draw = True;
    for @picks -> $pnum {
        my $p = LNum.new: :entry($pnum);
        if $show-draw {
            $p.matches: $w, :$show-draw;
            $show-draw = False;
        }
        else {
            $p.matches: $w; #, :$show-draw;
        }
    }
}
